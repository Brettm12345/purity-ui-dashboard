{"ast":null,"code":"import _objectWithoutProperties from \"/Users/vladmihalache/Documents/GitHub/purity-ui-dashboard-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/Users/vladmihalache/Documents/GitHub/purity-ui-dashboard-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _excluded = [\"rtlActive\", \"variant\", \"children\", \"fixed\", \"secondary\", \"brandText\", \"onOpen\"];\n\nvar _jsxFileName = \"/Users/vladmihalache/Documents/GitHub/purity-ui-dashboard-1/src/components/Navbars/AdminNavbar.js\",\n    _s = $RefreshSig$();\n\n// Chakra Imports\nimport { Box, Breadcrumb, BreadcrumbItem, BreadcrumbLink, Flex, Link, useColorModeValue } from \"@chakra-ui/react\";\nimport PropTypes from \"prop-types\";\nimport React, { useState } from \"react\";\nimport AdminNavbarLinks from \"./AdminNavbarLinks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AdminNavbar(props) {\n  _s();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      scrolled = _useState2[0],\n      setScrolled = _useState2[1];\n\n  var rtlActive = props.rtlActive,\n      variant = props.variant,\n      children = props.children,\n      fixed = props.fixed,\n      secondary = props.secondary,\n      brandText = props.brandText,\n      onOpen = props.onOpen,\n      rest = _objectWithoutProperties(props, _excluded); // Here are all the props that may change depending on navbar's type or state.(secondary, variant, scrolled)\n\n\n  var mainText = useColorModeValue(\"gray.700\", \"gray.200\");\n  var secondaryText = useColorModeValue(\"gray.400\", \"gray.200\");\n  var navbarPosition = \"absolute\";\n  var navbarFilter = \"none\";\n  var navbarBackdrop = \"blur(21px)\";\n  var navbarShadow = \"none\";\n  var navbarBg = \"none\";\n  var navbarBorder = \"transparent\";\n  var secondaryMargin = \"0px\";\n  var paddingX = \"15px\";\n  if (props.fixed === true) if (scrolled === true) {\n    navbarPosition = \"fixed\";\n    navbarShadow = useColorModeValue(\"0px 7px 23px rgba(0, 0, 0, 0.05)\", \"none\");\n    navbarBg = useColorModeValue(\"linear-gradient(112.83deg, rgba(255, 255, 255, 0.82) 0%, rgba(255, 255, 255, 0.8) 110.84%)\", \"linear-gradient(112.83deg, rgba(255, 255, 255, 0.21) 0%, rgba(255, 255, 255, 0) 110.84%)\");\n    navbarBorder = useColorModeValue(\"#FFFFFF\", \"rgba(255, 255, 255, 0.31)\");\n    navbarFilter = useColorModeValue(\"none\", \"drop-shadow(0px 7px 23px rgba(0, 0, 0, 0.05))\");\n  }\n\n  if (props.secondary) {\n    navbarBackdrop = \"none\";\n    navbarPosition = \"absolute\";\n    mainText = \"white\";\n    secondaryText = \"white\";\n    secondaryMargin = \"22px\";\n    paddingX = \"30px\";\n  }\n\n  var changeNavbar = function changeNavbar() {\n    if (window.scrollY > 1) {\n      setScrolled(true);\n    } else {\n      setScrolled(false);\n    }\n  };\n\n  window.addEventListener(\"scroll\", changeNavbar);\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    position: navbarPosition,\n    boxShadow: navbarShadow,\n    bg: navbarBg,\n    borderColor: navbarBorder,\n    filter: navbarFilter,\n    backdropFilter: navbarBackdrop,\n    borderWidth: \"1.5px\",\n    borderStyle: \"solid\",\n    transitionDelay: \"0s, 0s, 0s, 0s\",\n    transitionDuration: \" 0.25s, 0.25s, 0.25s, 0s\",\n    \"transition-property\": \"box-shadow, background-color, filter, border\",\n    transitionTimingFunction: \"linear, linear, linear, linear\",\n    alignItems: {\n      xl: \"center\"\n    },\n    borderRadius: \"16px\",\n    display: \"flex\",\n    minH: \"75px\",\n    justifyContent: {\n      xl: \"center\"\n    },\n    lineHeight: \"25.6px\",\n    mx: \"auto\",\n    mt: secondaryMargin,\n    pb: \"8px\",\n    right: {\n      sm: \"15px\",\n      xl: \"30px\"\n    },\n    px: {\n      sm: paddingX,\n      md: \"30px\"\n    },\n    paddingTop: \"8px\",\n    top: \"18px\",\n    w: {\n      sm: \"calc(100vw - 30px)\",\n      xl: \"calc(100vw - 75px - 275px)\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      w: \"100%\",\n      flexDirection: {\n        sm: \"column\",\n        md: \"row\"\n      },\n      alignItems: {\n        xl: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        mb: {\n          sm: \"8px\",\n          md: \"0px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n          children: [/*#__PURE__*/_jsxDEV(BreadcrumbItem, {\n            color: mainText,\n            children: /*#__PURE__*/_jsxDEV(BreadcrumbLink, {\n              href: \"#\",\n              color: secondaryText,\n              children: \"Pages\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BreadcrumbItem, {\n            color: mainText,\n            children: /*#__PURE__*/_jsxDEV(BreadcrumbLink, {\n              href: \"#\",\n              color: mainText,\n              children: brandText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          color: mainText,\n          href: \"#\",\n          bg: \"inherit\",\n          borderRadius: \"inherit\",\n          fontWeight: \"bold\",\n          _hover: {\n            color: {\n              mainText: mainText\n            }\n          },\n          _active: {\n            bg: \"inherit\",\n            transform: \"none\",\n            borderColor: \"transparent\"\n          },\n          _focus: {\n            boxShadow: \"none\"\n          },\n          children: brandText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        ms: \"auto\",\n        w: {\n          sm: \"100%\",\n          md: \"unset\"\n        },\n        children: /*#__PURE__*/_jsxDEV(AdminNavbarLinks, {\n          onOpen: props.onOpen,\n          rtlActive: rtlActive,\n          logoText: props.logoText,\n          secondary: props.secondary,\n          fixed: props.fixed\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AdminNavbar, \"pa9je59rp/0wBYbqp0Z2S33uII8=\", false, function () {\n  return [useColorModeValue, useColorModeValue, useColorModeValue, useColorModeValue, useColorModeValue, useColorModeValue];\n});\n\n_c = AdminNavbar;\nAdminNavbar.propTypes = {\n  rtlActive: PropTypes.bool,\n  brandText: PropTypes.string,\n  variant: PropTypes.string,\n  secondary: PropTypes.bool,\n  fixed: PropTypes.bool,\n  onOpen: PropTypes.func\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminNavbar\");","map":{"version":3,"sources":["/Users/vladmihalache/Documents/GitHub/purity-ui-dashboard-1/src/components/Navbars/AdminNavbar.js"],"names":["Box","Breadcrumb","BreadcrumbItem","BreadcrumbLink","Flex","Link","useColorModeValue","PropTypes","React","useState","AdminNavbarLinks","AdminNavbar","props","scrolled","setScrolled","rtlActive","variant","children","fixed","secondary","brandText","onOpen","rest","mainText","secondaryText","navbarPosition","navbarFilter","navbarBackdrop","navbarShadow","navbarBg","navbarBorder","secondaryMargin","paddingX","changeNavbar","window","scrollY","addEventListener","xl","sm","md","color","bg","transform","borderColor","boxShadow","logoText","propTypes","bool","string","func"],"mappings":"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","sourcesContent":["// Chakra Imports\nimport {\n  Box,\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  Flex,\n  Link,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport PropTypes from \"prop-types\";\nimport React, { useState } from \"react\";\nimport AdminNavbarLinks from \"./AdminNavbarLinks\";\n\nexport default function AdminNavbar(props) {\n  const [scrolled, setScrolled] = useState(false);\n  const {\n    rtlActive,\n    variant,\n    children,\n    fixed,\n    secondary,\n    brandText,\n    onOpen,\n    ...rest\n  } = props;\n\n  // Here are all the props that may change depending on navbar's type or state.(secondary, variant, scrolled)\n  let mainText = useColorModeValue(\"gray.700\", \"gray.200\");\n  let secondaryText = useColorModeValue(\"gray.400\", \"gray.200\");\n  let navbarPosition = \"absolute\";\n  let navbarFilter = \"none\";\n  let navbarBackdrop = \"blur(21px)\";\n  let navbarShadow = \"none\";\n  let navbarBg = \"none\";\n  let navbarBorder = \"transparent\";\n  let secondaryMargin = \"0px\";\n  let paddingX = \"15px\";\n  if (props.fixed === true)\n    if (scrolled === true) {\n      navbarPosition = \"fixed\";\n      navbarShadow = useColorModeValue(\n        \"0px 7px 23px rgba(0, 0, 0, 0.05)\",\n        \"none\"\n      );\n      navbarBg = useColorModeValue(\n        \"linear-gradient(112.83deg, rgba(255, 255, 255, 0.82) 0%, rgba(255, 255, 255, 0.8) 110.84%)\",\n        \"linear-gradient(112.83deg, rgba(255, 255, 255, 0.21) 0%, rgba(255, 255, 255, 0) 110.84%)\"\n      );\n      navbarBorder = useColorModeValue(\"#FFFFFF\", \"rgba(255, 255, 255, 0.31)\");\n      navbarFilter = useColorModeValue(\n        \"none\",\n        \"drop-shadow(0px 7px 23px rgba(0, 0, 0, 0.05))\"\n      );\n    }\n  if (props.secondary) {\n    navbarBackdrop = \"none\";\n    navbarPosition = \"absolute\";\n    mainText = \"white\";\n    secondaryText = \"white\";\n    secondaryMargin = \"22px\";\n    paddingX = \"30px\";\n  }\n  const changeNavbar = () => {\n    if (window.scrollY > 1) {\n      setScrolled(true);\n    } else {\n      setScrolled(false);\n    }\n  };\n  window.addEventListener(\"scroll\", changeNavbar);\n  return (\n    <Flex\n      position={navbarPosition}\n      boxShadow={navbarShadow}\n      bg={navbarBg}\n      borderColor={navbarBorder}\n      filter={navbarFilter}\n      backdropFilter={navbarBackdrop}\n      borderWidth=\"1.5px\"\n      borderStyle=\"solid\"\n      transitionDelay=\"0s, 0s, 0s, 0s\"\n      transitionDuration=\" 0.25s, 0.25s, 0.25s, 0s\"\n      transition-property=\"box-shadow, background-color, filter, border\"\n      transitionTimingFunction=\"linear, linear, linear, linear\"\n      alignItems={{ xl: \"center\" }}\n      borderRadius=\"16px\"\n      display=\"flex\"\n      minH=\"75px\"\n      justifyContent={{ xl: \"center\" }}\n      lineHeight=\"25.6px\"\n      mx=\"auto\"\n      mt={secondaryMargin}\n      pb=\"8px\"\n      right={{ sm: \"15px\", xl: \"30px\" }}\n      px={{\n        sm: paddingX,\n        md: \"30px\",\n      }}\n      paddingTop=\"8px\"\n      top=\"18px\"\n      w={{ sm: \"calc(100vw - 30px)\", xl: \"calc(100vw - 75px - 275px)\" }}\n    >\n      <Flex\n        w=\"100%\"\n        flexDirection={{\n          sm: \"column\",\n          md: \"row\",\n        }}\n        alignItems={{ xl: \"center\" }}\n      >\n        <Box mb={{ sm: \"8px\", md: \"0px\" }}>\n          <Breadcrumb>\n            <BreadcrumbItem color={mainText}>\n              <BreadcrumbLink href=\"#\" color={secondaryText}>\n                Pages\n              </BreadcrumbLink>\n            </BreadcrumbItem>\n\n            <BreadcrumbItem color={mainText}>\n              <BreadcrumbLink href=\"#\" color={mainText}>\n                {brandText}\n              </BreadcrumbLink>\n            </BreadcrumbItem>\n          </Breadcrumb>\n          {/* Here we create navbar brand, based on route name */}\n          <Link\n            color={mainText}\n            href=\"#\"\n            bg=\"inherit\"\n            borderRadius=\"inherit\"\n            fontWeight=\"bold\"\n            _hover={{ color: { mainText } }}\n            _active={{\n              bg: \"inherit\",\n              transform: \"none\",\n              borderColor: \"transparent\",\n            }}\n            _focus={{\n              boxShadow: \"none\",\n            }}\n          >\n            {brandText}\n          </Link>\n        </Box>\n        <Box ms=\"auto\" w={{ sm: \"100%\", md: \"unset\" }}>\n          <AdminNavbarLinks\n            onOpen={props.onOpen}\n            rtlActive={rtlActive}\n            logoText={props.logoText}\n            secondary={props.secondary}\n            fixed={props.fixed}\n          />\n        </Box>\n      </Flex>\n    </Flex>\n  );\n}\n\nAdminNavbar.propTypes = {\n  rtlActive: PropTypes.bool,\n  brandText: PropTypes.string,\n  variant: PropTypes.string,\n  secondary: PropTypes.bool,\n  fixed: PropTypes.bool,\n  onOpen: PropTypes.func,\n};\n"]},"metadata":{},"sourceType":"module"}