{"ast":null,"code":"import _objectSpread from \"/Users/vladmihalache/Documents/GitHub/purity-ui-dashboard-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/vladmihalache/Documents/GitHub/purity-ui-dashboard-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/vladmihalache/Documents/GitHub/purity-ui-dashboard-1/src/layouts/Admin.js\",\n    _s = $RefreshSig$();\n\n// Chakra imports\nimport { ChakraProvider, Portal, useColorModeValue, useDisclosure } from \"@chakra-ui/react\";\nimport Configurator from \"components/Configurator/Configurator\";\nimport Footer from \"components/Footer/Footer.js\"; // Layout components\n\nimport AdminNavbar from \"components/Navbars/AdminNavbar.js\";\nimport Sidebar from \"components/Sidebar/Sidebar.js\";\nimport React, { useState } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport routes from \"routes.js\"; // Custom Chakra theme\n\nimport theme from \"theme/theme.js\";\nimport FixedPlugin from \"../components/FixedPlugin/FixedPlugin\"; // Custom components\n\nimport MainPanel from \"../components/Layout/MainPanel\";\nimport PanelContainer from \"../components/Layout/PanelContainer\";\nimport PanelContent from \"../components/Layout/PanelContent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dashboard(props) {\n  _s();\n\n  var _this = this;\n\n  var rest = Object.assign({}, props); // states and functions\n\n  var _useState = useState(\"transparent\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      sidebarVariant = _useState2[0],\n      setSidebarVariant = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      fixed = _useState4[0],\n      setFixed = _useState4[1]; // ref for main panel div\n\n\n  var mainPanel = /*#__PURE__*/React.createRef(); // functions for changing the states from components\n\n  var getRoute = function getRoute() {\n    return window.location.pathname !== \"/admin/full-screen-maps\";\n  };\n\n  var getActiveRoute = function getActiveRoute(routes) {\n    var activeRoute = \"Default Brand Text\";\n\n    for (var i = 0; i < routes.length; i++) {\n      if (routes[i].collapse) {\n        var collapseActiveRoute = getActiveRoute(routes[i].views);\n\n        if (collapseActiveRoute !== activeRoute) {\n          return collapseActiveRoute;\n        }\n      } else if (routes[i].category) {\n        var categoryActiveRoute = getActiveRoute(routes[i].views);\n\n        if (categoryActiveRoute !== activeRoute) {\n          return categoryActiveRoute;\n        }\n      } else {\n        if (window.location.href.indexOf(routes[i].layout + routes[i].path) !== -1) {\n          return routes[i].name;\n        }\n      }\n    }\n\n    return activeRoute;\n  }; // This changes navbar state(fixed or not)\n\n\n  var getActiveNavbar = function getActiveNavbar(routes) {\n    var activeNavbar = false;\n\n    for (var i = 0; i < routes.length; i++) {\n      if (routes[i].category) {\n        var categoryActiveNavbar = getActiveNavbar(routes[i].views);\n\n        if (categoryActiveNavbar !== activeNavbar) {\n          return categoryActiveNavbar;\n        }\n      } else {\n        if (window.location.href.indexOf(routes[i].layout + routes[i].path) !== -1) {\n          if (routes[i].secondaryNavbar) {\n            return routes[i].secondaryNavbar;\n          }\n        }\n      }\n    }\n\n    return activeNavbar;\n  };\n\n  var getRoutes = function getRoutes(routes) {\n    return routes.map(function (prop, key) {\n      if (prop.collapse) {\n        return getRoutes(prop.views);\n      }\n\n      if (prop.category === \"account\") {\n        return getRoutes(prop.views);\n      }\n\n      if (prop.layout === \"/admin\") {\n        return /*#__PURE__*/_jsxDEV(Route, {\n          path: prop.layout + prop.path,\n          component: prop.component\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, _this);\n      } else {\n        return null;\n      }\n    });\n  };\n\n  var _useDisclosure = useDisclosure(),\n      isOpen = _useDisclosure.isOpen,\n      onOpen = _useDisclosure.onOpen,\n      onClose = _useDisclosure.onClose; // Chakra Color Mode\n\n\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    theme: theme,\n    resetCss: false,\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, _objectSpread({\n      routes: routes,\n      logoText: \"DASHBOARD\",\n      display: \"none\",\n      sidebarVariant: sidebarVariant\n    }, rest), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainPanel, {\n      ref: mainPanel,\n      w: {\n        base: \"100%\",\n        xl: \"calc(100% - 275px)\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Portal, {\n        children: /*#__PURE__*/_jsxDEV(AdminNavbar, _objectSpread({\n          onOpen: onOpen,\n          logoText: \"PURITY UI DASHBOARD\",\n          brandText: getActiveRoute(routes),\n          secondary: getActiveNavbar(routes),\n          rtlActive: false,\n          fixed: fixed\n        }, rest), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), getRoute() ? /*#__PURE__*/_jsxDEV(PanelContent, {\n        children: /*#__PURE__*/_jsxDEV(PanelContainer, {\n          children: /*#__PURE__*/_jsxDEV(Switch, {\n            children: [getRoutes(routes), /*#__PURE__*/_jsxDEV(Redirect, {\n              from: \"/admin\",\n              to: \"/admin/dashboard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Portal, {\n        children: /*#__PURE__*/_jsxDEV(FixedPlugin, {\n          secondary: getActiveNavbar(routes),\n          rtlActive: false,\n          fixed: fixed,\n          onOpen: onOpen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Configurator, {\n        secondary: getActiveNavbar(routes),\n        isOpen: isOpen,\n        onClose: onClose,\n        isChecked: fixed,\n        onSwitch: function onSwitch(value) {\n          setFixed(value);\n        },\n        onOpaque: function onOpaque() {\n          return setSidebarVariant(\"opaque\");\n        },\n        onTransparent: function onTransparent() {\n          return setSidebarVariant(\"transparent\");\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"R1QcLVvyEctvReg7mmSNPmD4ZFA=\", false, function () {\n  return [useDisclosure];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/vladmihalache/Documents/GitHub/purity-ui-dashboard-1/src/layouts/Admin.js"],"names":["ChakraProvider","Portal","useColorModeValue","useDisclosure","Configurator","Footer","AdminNavbar","Sidebar","React","useState","Redirect","Route","Switch","routes","theme","FixedPlugin","MainPanel","PanelContainer","PanelContent","Dashboard","props","rest","sidebarVariant","setSidebarVariant","fixed","setFixed","mainPanel","createRef","getRoute","window","location","pathname","getActiveRoute","activeRoute","i","length","collapse","collapseActiveRoute","views","category","categoryActiveRoute","href","indexOf","layout","path","name","getActiveNavbar","activeNavbar","categoryActiveNavbar","secondaryNavbar","getRoutes","map","prop","key","component","isOpen","onOpen","onClose","base","xl","value"],"mappings":"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","sourcesContent":["// Chakra imports\nimport {\n  ChakraProvider,\n  Portal,\n  useColorModeValue,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport Configurator from \"components/Configurator/Configurator\";\nimport Footer from \"components/Footer/Footer.js\";\n// Layout components\nimport AdminNavbar from \"components/Navbars/AdminNavbar.js\";\nimport Sidebar from \"components/Sidebar/Sidebar.js\";\nimport React, { useState } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport routes from \"routes.js\";\n// Custom Chakra theme\nimport theme from \"theme/theme.js\";\nimport FixedPlugin from \"../components/FixedPlugin/FixedPlugin\";\n// Custom components\nimport MainPanel from \"../components/Layout/MainPanel\";\nimport PanelContainer from \"../components/Layout/PanelContainer\";\nimport PanelContent from \"../components/Layout/PanelContent\";\nexport default function Dashboard(props) {\n  const { ...rest } = props;\n  // states and functions\n  const [sidebarVariant, setSidebarVariant] = useState(\"transparent\");\n  const [fixed, setFixed] = useState(false);\n  // ref for main panel div\n  const mainPanel = React.createRef();\n  // functions for changing the states from components\n  const getRoute = () => {\n    return window.location.pathname !== \"/admin/full-screen-maps\";\n  };\n  const getActiveRoute = (routes) => {\n    let activeRoute = \"Default Brand Text\";\n    for (let i = 0; i < routes.length; i++) {\n      if (routes[i].collapse) {\n        let collapseActiveRoute = getActiveRoute(routes[i].views);\n        if (collapseActiveRoute !== activeRoute) {\n          return collapseActiveRoute;\n        }\n      } else if (routes[i].category) {\n        let categoryActiveRoute = getActiveRoute(routes[i].views);\n        if (categoryActiveRoute !== activeRoute) {\n          return categoryActiveRoute;\n        }\n      } else {\n        if (\n          window.location.href.indexOf(routes[i].layout + routes[i].path) !== -1\n        ) {\n          return routes[i].name;\n        }\n      }\n    }\n    return activeRoute;\n  };\n  // This changes navbar state(fixed or not)\n  const getActiveNavbar = (routes) => {\n    let activeNavbar = false;\n    for (let i = 0; i < routes.length; i++) {\n      if (routes[i].category) {\n        let categoryActiveNavbar = getActiveNavbar(routes[i].views);\n        if (categoryActiveNavbar !== activeNavbar) {\n          return categoryActiveNavbar;\n        }\n      } else {\n        if (\n          window.location.href.indexOf(routes[i].layout + routes[i].path) !== -1\n        ) {\n          if (routes[i].secondaryNavbar) {\n            return routes[i].secondaryNavbar;\n          }\n        }\n      }\n    }\n    return activeNavbar;\n  };\n  const getRoutes = (routes) => {\n    return routes.map((prop, key) => {\n      if (prop.collapse) {\n        return getRoutes(prop.views);\n      }\n      if (prop.category === \"account\") {\n        return getRoutes(prop.views);\n      }\n      if (prop.layout === \"/admin\") {\n        return (\n          <Route\n            path={prop.layout + prop.path}\n            component={prop.component}\n            key={key}\n          />\n        );\n      } else {\n        return null;\n      }\n    });\n  };\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  // Chakra Color Mode\n  return (\n    <ChakraProvider theme={theme} resetCss={false}>\n      <Sidebar\n        routes={routes}\n        logoText={\"DASHBOARD\"}\n        display=\"none\"\n        sidebarVariant={sidebarVariant}\n        {...rest}\n      />\n      <MainPanel\n        ref={mainPanel}\n        w={{\n          base: \"100%\",\n          xl: \"calc(100% - 275px)\",\n        }}\n      >\n        <Portal>\n          <AdminNavbar\n            onOpen={onOpen}\n            logoText={\"PURITY UI DASHBOARD\"}\n            brandText={getActiveRoute(routes)}\n            secondary={getActiveNavbar(routes)}\n            rtlActive={false}\n            fixed={fixed}\n            {...rest}\n          />\n        </Portal>\n        {getRoute() ? (\n          <PanelContent>\n            <PanelContainer>\n              <Switch>\n                {getRoutes(routes)}\n                <Redirect from=\"/admin\" to=\"/admin/dashboard\" />\n              </Switch>\n            </PanelContainer>\n          </PanelContent>\n        ) : null}\n        <Footer />\n        <Portal>\n          <FixedPlugin\n            secondary={getActiveNavbar(routes)}\n            rtlActive={false}\n            fixed={fixed}\n            onOpen={onOpen}\n          />\n        </Portal>\n        <Configurator\n          secondary={getActiveNavbar(routes)}\n          isOpen={isOpen}\n          onClose={onClose}\n          isChecked={fixed}\n          onSwitch={(value) => {\n            setFixed(value);\n          }}\n          onOpaque={() => setSidebarVariant(\"opaque\")}\n          onTransparent={() => setSidebarVariant(\"transparent\")}\n        />\n      </MainPanel>\n    </ChakraProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}