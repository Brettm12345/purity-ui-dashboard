{"pageProps":{"mdxSource":{"compiledSource":"var l=Object.defineProperty,d=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var s=Object.getOwnPropertySymbols;var n=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var p=(t,a,r)=>a in t?l(t,a,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[a]=r,e=(t,a)=>{for(var r in a||(a={}))n.call(a,r)&&p(t,r,a[r]);if(s)for(var r of s(a))i.call(a,r)&&p(t,r,a[r]);return t},h=(t,a)=>d(t,m(a));var c=(t,a)=>{var r={};for(var o in t)n.call(t,o)&&a.indexOf(o)<0&&(r[o]=t[o]);if(t!=null&&s)for(var o of s(t))a.indexOf(o)<0&&i.call(t,o)&&(r[o]=t[o]);return r};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(r){var o=r,{components:t}=o,a=c(o,[\"components\"]);return mdx(MDXLayout,h(e(e({},layoutProps),a),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,`For the charts, we used the\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://apexcharts.com/react-chart-demos/\"}),\"ApexCharts\"),` library. Here are the\nstructures 2 dummy charts alongside their options and dummy data.`),mdx(\"h2\",e({},{id:\"import\"}),\"Import\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-js\"}),`import React, { Component } from \"react\"\nimport Card from \"components/Card/Card\"\nimport Chart from \"react-apexcharts\"\n//\nimport { barChartData, barChartOptions } from \"variables/charts\"\n`)),mdx(\"h2\",e({},{id:\"data-and-options-for-the-bar-chart\"}),\"Data and options for the Bar Chart\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// The data and options should look like this:\n\nexport const barChartData = [\n  {\n    name: \"Sales\",\n    data: [330, 250, 110, 300, 490, 350, 270, 130, 425],\n  },\n]\n\nexport const barChartOptions = {\n  chart: {\n    toolbar: {\n      show: false,\n    },\n  },\n  tooltip: {\n    style: {\n      backgroundColor: \"red\",\n      fontSize: \"12px\",\n      fontFamily: undefined,\n    },\n    onDatasetHover: {\n      style: {\n        backgroundColor: \"red\",\n        fontSize: \"12px\",\n        fontFamily: undefined,\n      },\n    },\n    theme: \"dark\",\n  },\n  xaxis: {\n    categories: [\"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n    show: false,\n    labels: {\n      show: false,\n      style: {\n        colors: \"#fff\",\n        fontSize: \"12px\",\n      },\n    },\n    axisBorder: {\n      show: false,\n    },\n    axisTicks: {\n      show: false,\n    },\n  },\n  yaxis: {\n    show: true,\n    color: \"#fff\",\n    labels: {\n      show: true,\n      style: {\n        colors: \"#fff\",\n        fontSize: \"14px\",\n      },\n    },\n  },\n  grid: {\n    show: false,\n  },\n  fill: {\n    colors: \"#fff\",\n  },\n  dataLabels: {\n    enabled: false,\n  },\n  plotOptions: {\n    bar: {\n      borderRadius: 8,\n      columnWidth: \"12px\",\n    },\n  },\n  responsive: [\n    {\n      breakpoint: 768,\n      options: {\n        plotOptions: {\n          bar: {\n            borderRadius: 0,\n          },\n        },\n      },\n    },\n  ],\n}\n`)),mdx(\"h2\",e({},{id:\"usage\"}),\"Usage\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`class BarChart extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      chartData: [],\n      chartOptions: {},\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      chartData: barChartData,\n      chartOptions: barChartOptions,\n    })\n  }\n\n  render() {\n    return (\n      <Card\n        py=\"1rem\"\n        height={{ sm: \"200px\" }}\n        width=\"100%\"\n        bg=\"linear-gradient(81.62deg, #313860 2.25%, #151928 79.87%)\"\n        position=\"relative\"\n      >\n        <Chart\n          options={this.state.chartOptions}\n          series={this.state.chartData}\n          type=\"bar\"\n          width=\"100%\"\n          height=\"100%\"\n        />\n      </Card>\n    )\n  }\n}\n\nexport default BarChart\n`)),mdx(\"h2\",e({},{id:\"import-1\"}),\"Import\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-js\"}),`import React from \"react\"\nimport ReactApexChart from \"react-apexcharts\"\nimport { lineChartData, lineChartOptions } from \"variables/charts\"\n`)),mdx(\"h2\",e({},{id:\"data-and-options-for-the-line-chart\"}),\"Data and options for the Line Chart\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// The data and options should look like this:\n\nexport const lineChartData = [\n  {\n    name: \"Mobile apps\",\n    data: [50, 40, 300, 220, 500, 250, 400, 230, 500],\n  },\n  {\n    name: \"Websites\",\n    data: [30, 90, 40, 140, 290, 290, 340, 230, 400],\n  },\n]\n\nexport const lineChartOptions = {\n  chart: {\n    toolbar: {\n      show: false,\n    },\n  },\n  tooltip: {\n    theme: \"dark\",\n  },\n  dataLabels: {\n    enabled: false,\n  },\n  stroke: {\n    curve: \"smooth\",\n  },\n  xaxis: {\n    type: \"datetime\",\n    categories: [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ],\n    labels: {\n      style: {\n        colors: \"#c8cfca\",\n        fontSize: \"12px\",\n      },\n    },\n  },\n  yaxis: {\n    labels: {\n      style: {\n        colors: \"#c8cfca\",\n        fontSize: \"12px\",\n      },\n    },\n  },\n  legend: {\n    show: false,\n  },\n  grid: {\n    strokeDashArray: 5,\n  },\n  fill: {\n    type: \"gradient\",\n    gradient: {\n      shade: \"light\",\n      type: \"vertical\",\n      shadeIntensity: 0.5,\n      gradientToColors: undefined, // optional, if not defined - uses the shades of same color in series\n      inverseColors: true,\n      opacityFrom: 0.8,\n      opacityTo: 0,\n      stops: [],\n    },\n    colors: [\"#4FD1C5\", \"#2D3748\"],\n  },\n  colors: [\"#4FD1C5\", \"#2D3748\"],\n}\n`)),mdx(\"h2\",e({},{id:\"usage-1\"}),\"Usage\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`class LineChart extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      chartData: [],\n      chartOptions: {},\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      chartData: lineChartData,\n      chartOptions: lineChartOptions,\n    })\n  }\n\n  render() {\n    return (\n      <ReactApexChart\n        options={this.state.chartOptions}\n        series={this.state.chartData}\n        type=\"area\"\n        width=\"100%\"\n        height=\"100%\"\n      />\n    )\n  }\n}\n\nexport default LineChart\n\nexport default BarChart\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Charts","package":"@chakra-ui/data-display","image":"components/box.svg","description":"Box is the most abstract component on top of which all other Chakra UI components are built. By default, it renders a `div` element"}},"frontMatter":{"excerpt":"For the charts, we used the","readTimeMinutes":5,"mdxContent":"---\ntitle: Charts\npackage: \"@chakra-ui/data-display\"\nimage: \"components/box.svg\"\ndescription:\n  Box is the most abstract component on top of which all other Chakra UI\n  components are built. By default, it renders a `div` element\n---\n\nFor the charts, we used the\n[ApexCharts](https://apexcharts.com/react-chart-demos/) library. Here are the\nstructures 2 dummy charts alongside their options and dummy data.\n\n## Import\n\n```js\nimport React, { Component } from \"react\"\nimport Card from \"components/Card/Card\"\nimport Chart from \"react-apexcharts\"\n//\nimport { barChartData, barChartOptions } from \"variables/charts\"\n```\n\n## Data and options for the Bar Chart\n\n```tsx\n// The data and options should look like this:\n\nexport const barChartData = [\n  {\n    name: \"Sales\",\n    data: [330, 250, 110, 300, 490, 350, 270, 130, 425],\n  },\n]\n\nexport const barChartOptions = {\n  chart: {\n    toolbar: {\n      show: false,\n    },\n  },\n  tooltip: {\n    style: {\n      backgroundColor: \"red\",\n      fontSize: \"12px\",\n      fontFamily: undefined,\n    },\n    onDatasetHover: {\n      style: {\n        backgroundColor: \"red\",\n        fontSize: \"12px\",\n        fontFamily: undefined,\n      },\n    },\n    theme: \"dark\",\n  },\n  xaxis: {\n    categories: [\"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n    show: false,\n    labels: {\n      show: false,\n      style: {\n        colors: \"#fff\",\n        fontSize: \"12px\",\n      },\n    },\n    axisBorder: {\n      show: false,\n    },\n    axisTicks: {\n      show: false,\n    },\n  },\n  yaxis: {\n    show: true,\n    color: \"#fff\",\n    labels: {\n      show: true,\n      style: {\n        colors: \"#fff\",\n        fontSize: \"14px\",\n      },\n    },\n  },\n  grid: {\n    show: false,\n  },\n  fill: {\n    colors: \"#fff\",\n  },\n  dataLabels: {\n    enabled: false,\n  },\n  plotOptions: {\n    bar: {\n      borderRadius: 8,\n      columnWidth: \"12px\",\n    },\n  },\n  responsive: [\n    {\n      breakpoint: 768,\n      options: {\n        plotOptions: {\n          bar: {\n            borderRadius: 0,\n          },\n        },\n      },\n    },\n  ],\n}\n```\n\n## Usage\n\n```tsx\nclass BarChart extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      chartData: [],\n      chartOptions: {},\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      chartData: barChartData,\n      chartOptions: barChartOptions,\n    })\n  }\n\n  render() {\n    return (\n      <Card\n        py=\"1rem\"\n        height={{ sm: \"200px\" }}\n        width=\"100%\"\n        bg=\"linear-gradient(81.62deg, #313860 2.25%, #151928 79.87%)\"\n        position=\"relative\"\n      >\n        <Chart\n          options={this.state.chartOptions}\n          series={this.state.chartData}\n          type=\"bar\"\n          width=\"100%\"\n          height=\"100%\"\n        />\n      </Card>\n    )\n  }\n}\n\nexport default BarChart\n```\n\n## Import\n\n```js\nimport React from \"react\"\nimport ReactApexChart from \"react-apexcharts\"\nimport { lineChartData, lineChartOptions } from \"variables/charts\"\n```\n\n## Data and options for the Line Chart\n\n```tsx\n// The data and options should look like this:\n\nexport const lineChartData = [\n  {\n    name: \"Mobile apps\",\n    data: [50, 40, 300, 220, 500, 250, 400, 230, 500],\n  },\n  {\n    name: \"Websites\",\n    data: [30, 90, 40, 140, 290, 290, 340, 230, 400],\n  },\n]\n\nexport const lineChartOptions = {\n  chart: {\n    toolbar: {\n      show: false,\n    },\n  },\n  tooltip: {\n    theme: \"dark\",\n  },\n  dataLabels: {\n    enabled: false,\n  },\n  stroke: {\n    curve: \"smooth\",\n  },\n  xaxis: {\n    type: \"datetime\",\n    categories: [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ],\n    labels: {\n      style: {\n        colors: \"#c8cfca\",\n        fontSize: \"12px\",\n      },\n    },\n  },\n  yaxis: {\n    labels: {\n      style: {\n        colors: \"#c8cfca\",\n        fontSize: \"12px\",\n      },\n    },\n  },\n  legend: {\n    show: false,\n  },\n  grid: {\n    strokeDashArray: 5,\n  },\n  fill: {\n    type: \"gradient\",\n    gradient: {\n      shade: \"light\",\n      type: \"vertical\",\n      shadeIntensity: 0.5,\n      gradientToColors: undefined, // optional, if not defined - uses the shades of same color in series\n      inverseColors: true,\n      opacityFrom: 0.8,\n      opacityTo: 0,\n      stops: [],\n    },\n    colors: [\"#4FD1C5\", \"#2D3748\"],\n  },\n  colors: [\"#4FD1C5\", \"#2D3748\"],\n}\n```\n\n## Usage\n\n```tsx\nclass LineChart extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      chartData: [],\n      chartOptions: {},\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      chartData: lineChartData,\n      chartOptions: lineChartOptions,\n    })\n  }\n\n  render() {\n    return (\n      <ReactApexChart\n        options={this.state.chartOptions}\n        series={this.state.chartData}\n        type=\"area\"\n        width=\"100%\"\n        height=\"100%\"\n      />\n    )\n  }\n}\n\nexport default LineChart\n\nexport default BarChart\n```\n","title":"Charts","package":"@chakra-ui/data-display","image":"components/box.svg","description":"Box is the most abstract component on top of which all other Chakra UI components are built. By default, it renders a `div` element","slug":"/docs/data-display/charts","lastEdited":{"date":"August 27, 2021","author":"VladMihalache"},"headings":[{"text":"Import","id":"import","level":"h2"},{"text":"Data and options for the Bar Chart","id":"data-and-options-for-the-bar-chart","level":"h2"},{"text":"Usage","id":"usage","level":"h2"},{"text":"Import","id":"import","level":"h2"},{"text":"Data and options for the Line Chart","id":"data-and-options-for-the-line-chart","level":"h2"},{"text":"Usage","id":"usage","level":"h2"}],"editUrl":"https://github.com/creativetimofficial/purity-ui-dashboard/edit/main/website/pages/docs/data-display/charts.mdx","author":null,"tags":[]},"_superjson":{"values":{"frontMatter.author":["undefined"]}}},"__N_SSG":true}