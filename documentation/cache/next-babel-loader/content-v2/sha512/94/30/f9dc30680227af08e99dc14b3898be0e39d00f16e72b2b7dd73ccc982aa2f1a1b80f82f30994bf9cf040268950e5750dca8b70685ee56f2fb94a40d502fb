{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport { SearchIcon } from \"@chakra-ui/icons\";\nimport { chakra, HStack, Kbd, Portal, Text, useColorModeValue, VisuallyHidden } from \"@chakra-ui/react\";\nimport { DocSearchModal, useDocSearchKeyboardEvents } from \"@docsearch/react\";\nimport Head from \"next/head\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport * as React from \"react\";\nimport SearchStyle from \"./search.styles\";\nvar ACTION_KEY_DEFAULT = [\"Ctrl\", \"Control\"];\nvar ACTION_KEY_APPLE = [\"âŒ˜\", \"Command\"];\n\nfunction Hit(props) {\n  var hit = props.hit,\n      children = props.children;\n  return __jsx(Link, {\n    href: hit.url,\n    passHref: true\n  }, __jsx(\"a\", null, children));\n}\n\nexport var SearchButton = /*#__PURE__*/React.forwardRef(function SearchButton(props, ref) {\n  var _React$useState = React.useState(ACTION_KEY_APPLE),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      actionKey = _React$useState2[0],\n      setActionKey = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (typeof navigator === \"undefined\") return;\n    var isMac = /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);\n\n    if (!isMac) {\n      setActionKey(ACTION_KEY_DEFAULT);\n    }\n  }, []);\n  return __jsx(chakra.button, _extends({\n    flex: \"1\",\n    type: \"button\",\n    role: \"search\",\n    mx: \"6\",\n    ref: ref,\n    lineHeight: \"1.2\",\n    w: \"100%\",\n    bg: useColorModeValue(\"white\", \"gray.700\"),\n    whiteSpace: \"nowrap\",\n    display: {\n      base: \"none\",\n      sm: \"flex\"\n    },\n    alignItems: \"center\",\n    color: \"gray.400\",\n    py: \"3\",\n    px: \"4\",\n    outline: \"0\",\n    _focus: {\n      shadow: \"outline\"\n    },\n    shadow: \"base\",\n    rounded: \"md\",\n    \"aria-label\": \"Search the docs\"\n  }, props), __jsx(SearchIcon, null), __jsx(HStack, {\n    w: \"full\",\n    ml: \"3\",\n    spacing: \"4px\"\n  }, __jsx(Text, {\n    textAlign: \"left\",\n    flex: \"1\"\n  }, \"Search the docs\"), __jsx(HStack, {\n    spacing: \"4px\"\n  }, __jsx(VisuallyHidden, null, \"Press \"), __jsx(Kbd, {\n    color: \"gray.500\",\n    rounded: \"2px\"\n  }, __jsx(chakra.div, {\n    as: \"abbr\",\n    title: actionKey[1],\n    textDecoration: \"none !important\"\n  }, actionKey[0])), __jsx(VisuallyHidden, null, \" and \"), __jsx(Kbd, {\n    color: \"gray.500\",\n    rounded: \"2px\"\n  }, \"K\"), __jsx(VisuallyHidden, null, \" to search\"))));\n});\n\nfunction AlgoliaSearch() {\n  var router = useRouter();\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isOpen = _React$useState4[0],\n      setIsOpen = _React$useState4[1];\n\n  var searchButtonRef = React.useRef();\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      initialQuery = _React$useState6[0],\n      setInitialQuery = _React$useState6[1];\n\n  var onOpen = React.useCallback(function () {\n    setIsOpen(true);\n  }, [setIsOpen]);\n  var onClose = React.useCallback(function () {\n    setIsOpen(false);\n  }, [setIsOpen]);\n  var onInput = React.useCallback(function (e) {\n    setIsOpen(true);\n    setInitialQuery(e.key);\n  }, [setIsOpen, setInitialQuery]);\n  useDocSearchKeyboardEvents({\n    isOpen: isOpen,\n    onOpen: onOpen,\n    onClose: onClose,\n    onInput: onInput,\n    searchButtonRef: searchButtonRef\n  });\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"link\", {\n    rel: \"preconnect\",\n    href: \"https://BH4D9OD16A-dsn.algolia.net\",\n    crossOrigin: \"true\"\n  })), __jsx(SearchStyle, null), __jsx(SearchButton, {\n    onClick: onOpen,\n    ref: searchButtonRef\n  }), isOpen && __jsx(Portal, null, __jsx(DocSearchModal, {\n    placeholder: \"Search the docs\",\n    initialQuery: initialQuery,\n    initialScrollY: window.scrollY,\n    onClose: onClose,\n    indexName: \"chakra-ui\",\n    apiKey: \"df1dcc41f7b8e5d68e73dd56d1e19701\",\n    appId: \"BH4D9OD16A\" //@ts-expect-error\n    ,\n    navigator: {\n      navigate: function navigate(_ref) {\n        var suggestionUrl = _ref.suggestionUrl;\n        setIsOpen(false);\n        router.push(suggestionUrl);\n      }\n    },\n    hitComponent: Hit,\n    transformItems: function transformItems(items) {\n      return items.map(function (item) {\n        var a = document.createElement(\"a\");\n        a.href = item.url;\n        var hash = a.hash === \"#content-wrapper\" ? \"\" : a.hash;\n        item.url = \"\".concat(a.pathname).concat(hash);\n        return item;\n      });\n    }\n  })));\n}\n\nexport default AlgoliaSearch;","map":null,"metadata":{},"sourceType":"module"}