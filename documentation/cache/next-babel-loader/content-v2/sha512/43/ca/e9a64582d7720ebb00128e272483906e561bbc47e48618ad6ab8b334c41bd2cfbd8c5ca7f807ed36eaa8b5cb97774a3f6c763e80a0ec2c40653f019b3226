{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport { SearchIcon } from \"@chakra-ui/icons\";\nimport { Box, Center, chakra, Flex, Modal, ModalBody, ModalContent, ModalOverlay, useDisclosure, useEventListener, useUpdateEffect } from \"@chakra-ui/react\";\nimport searchData from \"configs/search-meta.json\";\nimport { matchSorter } from \"match-sorter\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport * as React from \"react\";\nimport MultiRef from \"react-multi-ref\";\nimport scrollIntoView from \"scroll-into-view-if-needed\";\nimport { findAll } from \"highlight-words-core\";\nimport { SearchButton } from \"./algolia-search\";\n\nfunction OptionText(props) {\n  var searchWords = props.searchWords,\n      textToHighlight = props.textToHighlight;\n  var chunks = findAll({\n    searchWords: searchWords,\n    textToHighlight: textToHighlight,\n    autoEscape: true\n  });\n  var highlightedText = chunks.map(function (chunk) {\n    var end = chunk.end,\n        highlight = chunk.highlight,\n        start = chunk.start;\n    var text = textToHighlight.substr(start, end - start);\n\n    if (highlight) {\n      return __jsx(Box, {\n        as: \"mark\",\n        bg: \"transparent\",\n        color: \"teal.500\"\n      }, text);\n    } else {\n      return text;\n    }\n  });\n  return highlightedText;\n}\n\nfunction DocIcon(props) {\n  return __jsx(chakra.svg, _extends({\n    strokeWidth: \"2px\",\n    width: \"20px\",\n    height: \"20px\",\n    viewBox: \"0 0 20 20\"\n  }, props), __jsx(\"path\", {\n    d: \"M17 6v12c0 .52-.2 1-1 1H4c-.7 0-1-.33-1-1V2c0-.55.42-1 1-1h8l5 5zM14 8h-3.13c-.51 0-.87-.34-.87-.87V4\",\n    stroke: \"currentColor\",\n    fill: \"none\",\n    fillRule: \"evenodd\",\n    strokeLinejoin: \"round\"\n  }));\n}\n\nfunction EnterIcon(props) {\n  return __jsx(chakra.svg, _extends({\n    strokeWidth: \"2px\",\n    width: \"16px\",\n    height: \"16px\",\n    viewBox: \"0 0 20 20\"\n  }, props), __jsx(\"g\", {\n    stroke: \"currentColor\",\n    fill: \"none\",\n    fillRule: \"evenodd\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, __jsx(\"path\", {\n    d: \"M18 3v4c0 2-2 4-4 4H2\"\n  }), __jsx(\"path\", {\n    d: \"M8 17l-6-6 6-6\"\n  })));\n}\n\nfunction HashIcon(props) {\n  return __jsx(chakra.svg, _extends({\n    strokeWidth: \"2px\",\n    width: \"20px\",\n    height: \"20px\",\n    viewBox: \"0 0 20 20\"\n  }, props), __jsx(\"path\", {\n    d: \"M13 13h4-4V8H7v5h6v4-4H7V8H3h4V3v5h6V3v5h4-4v5zm-6 0v4-4H3h4z\",\n    stroke: \"currentColor\",\n    fill: \"none\",\n    fillRule: \"evenodd\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }));\n}\n\nfunction OmniSearch() {\n  var router = useRouter();\n\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      query = _React$useState2[0],\n      setQuery = _React$useState2[1];\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      active = _React$useState4[0],\n      setActive = _React$useState4[1];\n\n  var _React$useState5 = React.useState(true),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      shouldCloseModal = _React$useState6[0],\n      setShouldCloseModal = _React$useState6[1];\n\n  var menu = useDisclosure();\n  var modal = useDisclosure();\n\n  var _React$useState7 = React.useState(function () {\n    return new MultiRef();\n  }),\n      _React$useState8 = _slicedToArray(_React$useState7, 1),\n      menuNodes = _React$useState8[0];\n\n  var menuRef = React.useRef(null);\n  var eventRef = React.useRef(null);\n  React.useEffect(function () {\n    router.events.on(\"routeChangeComplete\", modal.onClose);\n    return function () {\n      router.events.off(\"routeChangeComplete\", modal.onClose);\n    };\n  }, []);\n  useEventListener(\"keydown\", function (event) {\n    var _navigator, _event$key;\n\n    var isMac = /(Mac|iPhone|iPod|iPad)/i.test((_navigator = navigator) === null || _navigator === void 0 ? void 0 : _navigator.platform);\n    var hotkey = isMac ? \"metaKey\" : \"ctrlKey\";\n\n    if ((event === null || event === void 0 ? void 0 : (_event$key = event.key) === null || _event$key === void 0 ? void 0 : _event$key.toLowerCase()) === \"k\" && event[hotkey]) {\n      event.preventDefault();\n      modal.isOpen ? modal.onClose() : modal.onOpen();\n    }\n  });\n  React.useEffect(function () {\n    if (modal.isOpen && query.length > 0) {\n      setQuery(\"\");\n    }\n  }, [modal.isOpen]);\n  var results = React.useMemo(function getResults() {\n    if (query.length < 2) return [];\n    return matchSorter(searchData, query, {\n      keys: [\"hierarchy.lvl1\", \"hierarchy.lvl2\", \"hierarchy.lvl3\", \"content\"]\n    }).slice(0, 20);\n  }, [query]);\n  var onKeyDown = React.useCallback(function (e) {\n    eventRef.current = \"keyboard\";\n\n    switch (e.key) {\n      case \"ArrowDown\":\n        {\n          e.preventDefault();\n\n          if (active + 1 < results.length) {\n            setActive(active + 1);\n          }\n\n          break;\n        }\n\n      case \"ArrowUp\":\n        {\n          e.preventDefault();\n\n          if (active - 1 >= 0) {\n            setActive(active - 1);\n          }\n\n          break;\n        }\n\n      case \"Control\":\n      case \"Alt\":\n      case \"Shift\":\n        {\n          e.preventDefault();\n          setShouldCloseModal(true);\n          break;\n        }\n\n      case \"Enter\":\n        {\n          modal.onClose();\n          router.push(results[active].url);\n          break;\n        }\n    }\n  }, [active, results, router]);\n  var onKeyUp = React.useCallback(function (e) {\n    eventRef.current = \"keyboard\";\n\n    switch (e.key) {\n      case \"Control\":\n      case \"Alt\":\n      case \"Shift\":\n        {\n          e.preventDefault();\n          setShouldCloseModal(false);\n        }\n    }\n  }, []);\n  useUpdateEffect(function () {\n    setActive(0);\n  }, [query]);\n  useUpdateEffect(function () {\n    if (!menuRef.current || eventRef.current === \"mouse\") return;\n    var node = menuNodes.map.get(active);\n    if (!node) return;\n    scrollIntoView(node, {\n      scrollMode: \"if-needed\",\n      block: \"nearest\",\n      inline: \"nearest\",\n      boundary: menuRef.current\n    });\n  }, [active]);\n  var open = menu.isOpen && results.length > 0;\n  return __jsx(React.Fragment, null, __jsx(SearchButton, {\n    onClick: modal.onOpen\n  }), __jsx(Modal, {\n    scrollBehavior: \"inside\",\n    isOpen: modal.isOpen,\n    onClose: modal.onClose\n  }, __jsx(ModalOverlay, null), __jsx(ModalContent, {\n    role: \"combobox\",\n    \"aria-expanded\": \"true\",\n    \"aria-haspopup\": \"listbox\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    top: \"4vh\",\n    bg: \"transparent\",\n    shadow: \"lg\",\n    maxW: \"600px\"\n  }, __jsx(Flex, {\n    pos: \"relative\",\n    align: \"stretch\"\n  }, __jsx(chakra.input, {\n    \"aria-autocomplete\": \"list\",\n    autoComplete: \"off\",\n    autoCorrect: \"off\",\n    spellCheck: \"false\",\n    maxLength: 64,\n    sx: {\n      w: \"100%\",\n      h: \"68px\",\n      pl: \"68px\",\n      fontWeight: \"medium\",\n      outline: 0,\n      bg: \"white\",\n      \".chakra-ui-dark &\": {\n        bg: \"gray.700\"\n      }\n    },\n    placeholder: \"Search the docs\",\n    value: query,\n    onChange: function onChange(e) {\n      setQuery(e.target.value);\n      menu.onOpen();\n    },\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp\n  }), __jsx(Center, {\n    pos: \"absolute\",\n    left: 7,\n    h: \"68px\"\n  }, __jsx(SearchIcon, {\n    color: \"teal.500\",\n    boxSize: \"20px\"\n  }))), __jsx(ModalBody, {\n    maxH: \"66vh\",\n    p: \"0\",\n    ref: menuRef\n  }, open && __jsx(Box, {\n    sx: {\n      px: 4,\n      bg: \"white\",\n      \".chakra-ui-dark &\": {\n        bg: \"gray.700\"\n      }\n    }\n  }, __jsx(Box, {\n    as: \"ul\",\n    role: \"listbox\",\n    borderTopWidth: \"1px\",\n    pt: 2,\n    pb: 4\n  }, results.map(function (item, index) {\n    var selected = index === active;\n    var isLvl1 = item.type === \"lvl1\";\n    return __jsx(Link, {\n      key: item.id,\n      href: item.url,\n      passHref: true\n    }, __jsx(\"a\", null, __jsx(Box, {\n      id: \"search-item-\".concat(index),\n      as: \"li\",\n      \"aria-selected\": selected ? true : undefined,\n      onMouseEnter: function onMouseEnter() {\n        setActive(index);\n        eventRef.current = \"mouse\";\n      },\n      onClick: function onClick() {\n        if (shouldCloseModal) {\n          modal.onClose();\n        }\n      },\n      ref: menuNodes.ref(index),\n      role: \"option\",\n      key: item.id,\n      sx: {\n        display: \"flex\",\n        alignItems: \"center\",\n        minH: 16,\n        mt: 2,\n        px: 4,\n        py: 2,\n        rounded: \"lg\",\n        bg: \"gray.100\",\n        \".chakra-ui-dark &\": {\n          bg: \"gray.600\"\n        },\n        _selected: {\n          bg: \"teal.500\",\n          color: \"white\",\n          mark: {\n            color: \"white\",\n            textDecoration: \"underline\"\n          }\n        }\n      }\n    }, isLvl1 ? __jsx(DocIcon, {\n      opacity: 0.4\n    }) : __jsx(HashIcon, {\n      opacity: 0.4\n    }), __jsx(Box, {\n      flex: \"1\",\n      ml: \"4\"\n    }, !isLvl1 && __jsx(Box, {\n      fontWeight: \"medium\",\n      fontSize: \"xs\",\n      opacity: 0.7\n    }, item.hierarchy.lvl1), __jsx(Box, {\n      fontWeight: \"semibold\"\n    }, __jsx(OptionText, {\n      searchWords: [query],\n      textToHighlight: item.content\n    }))), __jsx(EnterIcon, {\n      opacity: 0.5\n    }))));\n  })))))));\n}\n\nexport default OmniSearch;","map":null,"metadata":{},"sourceType":"module"}